package api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import params.PostUsers;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

@Controller    // This means that this class is a Controller
public class APIController {
    @Autowired // This means to get the bean called googleUserRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GoogleUserRepository googleUserRepository;

    @Autowired
    private GoogleUserActivityRepository googleUserActivityRepository;

    /**
     * Endpoint for storing user's data and activities into DB.
     * @param postUsers instance of PostUsers, deserialized from JSON.
     */
    @PostMapping(path="/users")
    public @ResponseBody String storeUserDataActivity (@RequestBody PostUsers postUsers) {

        GooglePlusAPIWrapper gpa = new GooglePlusAPIWrapper(postUsers);
        GoogleUser googleUser = null;
        List<GoogleUserActivity> googleUserActivities = null;
        try {
            googleUser = gpa.getGoogleUser(); //"100319987084126732102"
            googleUserActivities = gpa.getActivities(googleUser);
        } catch (Exception e) {
            //TODO:handle not found etc.
            //TODO: return JSON
            e.printStackTrace();
        }

        googleUserRepository.save(googleUser);
        googleUserActivityRepository.saveAll(googleUserActivities);

        return  String.format("storeUserDataActivity of user gid: %s, token: %s",
                postUsers.getGoogleUserId(),
                postUsers.getAccessToken());
    }


    /**
     * Endpoint which deletes the user data and his activities.
     * @param userGoogleId id of the user.
     */
    @RequestMapping(value = "/users/{userGoogleId}", method = DELETE)
    public @ResponseBody String deleteUserDataActivity(@PathVariable String userGoogleId){


        googleUserRepository.deleteById(userGoogleId);

        return  String.format("Deleted user and activities gid: %s", userGoogleId);
    }

    /**
     * Endpoint which returns the user data.
     * TODO: (Google ID, name, gender, profile picture URL)
     * @param userGoogleId id of the user.
     */
    @RequestMapping(value = "/users/{userGoogleId}", method = GET)
    public @ResponseBody String getUserData(@PathVariable String userGoogleId){

        Optional<GoogleUser> optionalGoogleUser = googleUserRepository.findById(userGoogleId);

        GoogleUser googleUser = null;
        try {
            googleUser = optionalGoogleUser.get();
        } catch(NoSuchElementException e){
            e.printStackTrace();
            return null;
        }

        return String.format("Google user id: %s, name: %s, gender: %s, picture: %s",
                googleUser.getGoogleUserId(),
                googleUser.getName(),
                googleUser.getGender(),
                googleUser.getPictureUrl());

    }

    /**
     * Endpoint which returns list of activities of the user.
     * TODO: (each with: URL on Google+, title, kind, numbers of replies, number of plusoners)
     * @param userGoogleId id of the user.
     */
    @RequestMapping(value = "/users/{userGoogleId}/activities", method = GET)
    public @ResponseBody String getUserActivities(@PathVariable String userGoogleId){
        List<GoogleUserActivity> googleUserActivities =
                googleUserActivityRepository.findByGoogleUserGoogleUserId(userGoogleId);

        String result = "";
        for(GoogleUserActivity googleUserActivity: googleUserActivities){
            result += String.format("%s,%s,%s,%s,%s,%s,%s\n",
                    googleUserActivity.getActivityId(),
                    googleUserActivity.getEtag(),
                    googleUserActivity.getGoogleUser().getGoogleUserId(),
                    googleUserActivity.getPublished(),
                    googleUserActivity.getUpdated(),
                    googleUserActivity.getTitle(),
                    googleUserActivity.getUrl());
        }

        return  result;
    }
}